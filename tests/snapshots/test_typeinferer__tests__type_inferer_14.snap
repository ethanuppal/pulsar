---
source: tests/test_typeinferer.rs
expression: "typeinferer_output(&format!(\"tests/data/infer{}.plsr\",\n                14)).expect(\"failed to parse/infer input\")"
---
func test() -> (out: Int64) {
    for i in 0 ..< 10 {
        out = 1
        ---
        out = 2
    }
}
func test2() -> (out: Int64) {
    for i in 0 ..< 10 {
        out = 1
    }
    ---
    for i in 0 ..< 10 {
        out = 2
    }
}
[infer14.plsr:2:14, infer14.plsr:2:15) 0: Int64
[infer14.plsr:2:20, infer14.plsr:2:22) 10: Int64
[infer14.plsr:3:9, infer14.plsr:3:12) out: Int64
[infer14.plsr:3:15, infer14.plsr:3:16) 1: Int64
[infer14.plsr:5:9, infer14.plsr:5:12) out: Int64
[infer14.plsr:5:15, infer14.plsr:5:16) 2: Int64
[infer14.plsr:10:14, infer14.plsr:10:15) 0: Int64
[infer14.plsr:10:20, infer14.plsr:10:22) 10: Int64
[infer14.plsr:11:9, infer14.plsr:11:12) out: Int64
[infer14.plsr:11:15, infer14.plsr:11:16) 1: Int64
[infer14.plsr:14:14, infer14.plsr:14:15) 0: Int64
[infer14.plsr:14:20, infer14.plsr:14:22) 10: Int64
[infer14.plsr:15:9, infer14.plsr:15:12) out: Int64
[infer14.plsr:15:15, infer14.plsr:15:16) 2: Int64
