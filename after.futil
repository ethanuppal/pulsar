extern "/Users/ethan/Documents/GitHub/calyx/primitives/binary_operators.sv" {
  comb primitive std_fp_add<"share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  comb primitive std_fp_sub<"share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  primitive std_fp_mult_pipe<"state_share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](@clk clk: 1, @reset reset: 1, @write_together @static(3) @go go: 1, @write_together @data left: WIDTH, @write_together @data right: WIDTH) -> (@stable out: WIDTH, @done done: 1);
  primitive std_fp_div_pipe<"state_share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](@clk clk: 1, @reset reset: 1, @write_together @go go: 1, @write_together @data left: WIDTH, @write_together @data right: WIDTH) -> (@stable out_remainder: WIDTH, @stable out_quotient: WIDTH, @done done: 1);
  comb primitive std_fp_gt<"share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_fp_sadd<"share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  comb primitive std_fp_ssub<"share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  primitive std_fp_smult_pipe<"state_share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](@clk clk: 1, @reset reset: 1, @write_together @static(3) @go go: 1, @write_together @data left: WIDTH, @write_together @data right: WIDTH) -> (@stable out: WIDTH, @done done: 1);
  primitive std_fp_sdiv_pipe<"state_share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](@clk clk: 1, @reset reset: 1, @write_together @go go: 1, @write_together @data left: WIDTH, @write_together @data right: WIDTH) -> (@stable out_remainder: WIDTH, @stable out_quotient: WIDTH, @done done: 1);
  comb primitive std_fp_sgt<"share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_fp_slt<"share"=1>[WIDTH, INT_WIDTH, FRAC_WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  primitive std_mult_pipe<"state_share"=1>[WIDTH](@clk clk: 1, @reset reset: 1, @write_together @static(3) @go go: 1, @write_together @data left: WIDTH, @write_together @data right: WIDTH) -> (@stable out: WIDTH, @done done: 1);
  primitive std_div_pipe<"state_share"=1>[WIDTH](@clk clk: 1, @reset reset: 1, @write_together @go go: 1, @write_together @data left: WIDTH, @write_together @data right: WIDTH) -> (@stable out_quotient: WIDTH, @stable out_remainder: WIDTH, @done done: 1);
  comb primitive std_sadd<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  comb primitive std_ssub<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  primitive std_smult_pipe<"state_share"=1>[WIDTH](@clk clk: 1, @reset reset: 1, @write_together @static(3) @go go: 1, @write_together @data left: WIDTH, @write_together @data right: WIDTH) -> (@stable out: WIDTH, @done done: 1);
  primitive std_sdiv_pipe[WIDTH](@clk clk: 1, @reset reset: 1, @write_together @go go: 1, @write_together @data left: WIDTH, @write_together @data right: WIDTH) -> (out_quotient: WIDTH, out_remainder: WIDTH, @done done: 1);
  comb primitive std_sgt<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_slt<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_seq<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_sneq<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_sge<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_sle<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_slsh<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  comb primitive std_srsh<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  comb primitive std_signext<"share"=1>[IN_WIDTH, OUT_WIDTH](@data in: IN_WIDTH) -> (out: OUT_WIDTH);
}
extern "/Users/ethan/Documents/GitHub/calyx/primitives/core.sv" {
  comb primitive std_slice<"share"=1>[IN_WIDTH, OUT_WIDTH](@data in: IN_WIDTH) -> (out: OUT_WIDTH);
  comb primitive std_pad<"share"=1>[IN_WIDTH, OUT_WIDTH](@data in: IN_WIDTH) -> (out: OUT_WIDTH);
  comb primitive std_cat<"share"=1>[LEFT_WIDTH, RIGHT_WIDTH, OUT_WIDTH](@data left: LEFT_WIDTH, @data right: RIGHT_WIDTH) -> (out: OUT_WIDTH);
  comb primitive std_not<"share"=1>[WIDTH](@data in: WIDTH) -> (out: WIDTH);
  comb primitive std_and<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  comb primitive std_or<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  comb primitive std_xor<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  comb primitive std_sub<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  comb primitive std_gt<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_lt<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_eq<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_neq<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_ge<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_le<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: 1);
  comb primitive std_lsh<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  comb primitive std_rsh<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH);
  comb primitive std_mux<"share"=1>[WIDTH](@data cond: 1, @data tru: WIDTH, @data fal: WIDTH) -> (out: WIDTH);
  primitive std_mem_d1[WIDTH, SIZE, IDX_SIZE](@read_together addr0: IDX_SIZE, @write_together @data write_data: WIDTH, @write_together @static @go write_en: 1, @clk clk: 1, @reset reset: 1) -> (@read_together read_data: WIDTH, @done done: 1);
  primitive std_mem_d2[WIDTH, D0_SIZE, D1_SIZE, D0_IDX_SIZE, D1_IDX_SIZE](@read_together @write_together(2) addr0: D0_IDX_SIZE, @read_together @write_together(2) addr1: D1_IDX_SIZE, @write_together @data write_data: WIDTH, @write_together @static @go write_en: 1, @clk clk: 1, @reset reset: 1) -> (@read_together read_data: WIDTH, @done done: 1);
  primitive std_mem_d3[WIDTH, D0_SIZE, D1_SIZE, D2_SIZE, D0_IDX_SIZE, D1_IDX_SIZE, D2_IDX_SIZE](@read_together @write_together(2) addr0: D0_IDX_SIZE, @read_together @write_together(2) addr1: D1_IDX_SIZE, @read_together @write_together(2) addr2: D2_IDX_SIZE, @write_together @data write_data: WIDTH, @write_together @static @go write_en: 1, @clk clk: 1, @reset reset: 1) -> (@read_together read_data: WIDTH, @done done: 1);
  primitive std_mem_d4[WIDTH, D0_SIZE, D1_SIZE, D2_SIZE, D3_SIZE, D0_IDX_SIZE, D1_IDX_SIZE, D2_IDX_SIZE, D3_IDX_SIZE](@read_together @write_together(2) addr0: D0_IDX_SIZE, @read_together @write_together(2) addr1: D1_IDX_SIZE, @read_together @write_together(2) addr2: D2_IDX_SIZE, @read_together @write_together(2) addr3: D3_IDX_SIZE, @write_together @data write_data: WIDTH, @write_together @static @go write_en: 1, @clk clk: 1) -> (@read_together read_data: WIDTH, @done done: 1);
}
primitive undef<"share"=1>[WIDTH]() -> (out: WIDTH) {
  assign out = 'x;
}
comb primitive std_const<"share"=1>[WIDTH, VALUE]() -> (out: WIDTH) {
  assign out = VALUE;
}
comb primitive std_wire<"share"=1>[WIDTH](@data in: WIDTH) -> (out: WIDTH) {
  assign out = in;
}
comb primitive std_add<"share"=1>[WIDTH](@data left: WIDTH, @data right: WIDTH) -> (out: WIDTH) {
  assign out = left + right;
}
primitive std_reg<"state_share"=1>[WIDTH](@write_together @data in: WIDTH, @write_together @static @go write_en: 1, @clk clk: 1, @reset reset: 1) -> (@stable out: WIDTH, @done done: 1) {
  always_ff @(posedge clk) begin
    if (reset) begin
       out <= 0;
       done <= 0;
    end else if (write_en) begin
      out <= in;
      done <= 1'd1;
    end else done <= 1'd0;
  end
}
component _pulsar_Sinc_q_q<"state_share"=1>(arg0: 64, @go go: 1, @clk clk: 1, @reset reset: 1) -> (ret: 64, @done done: 1) {
  cells {
    @data t0 = std_reg(64);
    @data i0 = std_reg(64);
    @data i1 = std_reg(64);
    @data adder = std_add(64);
    @generated fsm = std_reg(2);
    @generated invoke_go = std_wire(1);
    @generated invoke_done = std_wire(1);
    @generated invoke0_go = std_wire(1);
    @generated invoke0_done = std_wire(1);
    @generated invoke1_go = std_wire(1);
    @generated invoke1_done = std_wire(1);
    @generated tdcc_go = std_wire(1);
    @generated tdcc_done = std_wire(1);
  }
  wires {
    i0.write_en = invoke_go.out ? 1'd1;
    i0.clk = clk;
    i0.reset = reset;
    i0.in = invoke_go.out ? arg0;
    invoke_go.in = !invoke_done.out & fsm.out == 2'd0 & tdcc_go.out ? 1'd1;
    done = tdcc_done.out ? 1'd1;
    ret = t0.out;
    adder.left = invoke0_go.out ? i0.out;
    adder.right = invoke0_go.out ? 64'd1;
    fsm.write_en = fsm.out == 2'd3 | fsm.out == 2'd0 & invoke_done.out & tdcc_go.out | fsm.out == 2'd1 & invoke0_done.out & tdcc_go.out | fsm.out == 2'd2 & invoke1_done.out & tdcc_go.out ? 1'd1;
    fsm.clk = clk;
    fsm.reset = reset;
    fsm.in = fsm.out == 2'd0 & invoke_done.out & tdcc_go.out ? 2'd1;
    fsm.in = fsm.out == 2'd3 ? 2'd0;
    fsm.in = fsm.out == 2'd2 & invoke1_done.out & tdcc_go.out ? 2'd3;
    fsm.in = fsm.out == 2'd1 & invoke0_done.out & tdcc_go.out ? 2'd2;
    invoke0_go.in = !invoke0_done.out & fsm.out == 2'd1 & tdcc_go.out ? 1'd1;
    tdcc_go.in = go;
    invoke_done.in = i0.done;
    invoke0_done.in = i1.done;
    invoke1_go.in = !invoke1_done.out & fsm.out == 2'd2 & tdcc_go.out ? 1'd1;
    t0.write_en = invoke1_go.out ? 1'd1;
    t0.clk = clk;
    t0.reset = reset;
    t0.in = invoke1_go.out ? i1.out;
    i1.write_en = invoke0_go.out ? 1'd1;
    i1.clk = clk;
    i1.reset = reset;
    i1.in = invoke0_go.out ? adder.out;
    tdcc_done.in = fsm.out == 2'd3 ? 1'd1;
    invoke1_done.in = t0.done;
  }
  control {}
}
component _pulsar_Smain_q_q(arg0: 64, @go go: 1, @clk clk: 1, @reset reset: 1) -> (ret: 64, @done done: 1) {
  cells {
    @data t1 = std_reg(64);
    @data i2 = std_reg(64);
    @data call_pulsar_Sinc_q_q = _pulsar_Sinc_q_q();
    @generated fsm = std_reg(3);
    @generated invoke_go = std_wire(1);
    @generated invoke_done = std_wire(1);
    @generated invoke0_go = std_wire(1);
    @generated invoke0_done = std_wire(1);
    @generated invoke1_go = std_wire(1);
    @generated invoke1_done = std_wire(1);
    @generated invoke2_go = std_wire(1);
    @generated invoke2_done = std_wire(1);
    @generated tdcc_go = std_wire(1);
    @generated tdcc_done = std_wire(1);
  }
  wires {
    invoke_go.in = !invoke_done.out & fsm.out == 3'd0 & tdcc_go.out ? 1'd1;
    done = tdcc_done.out ? 1'd1;
    ret = t1.out;
    i2.write_en = invoke_go.out | invoke1_go.out ? 1'd1;
    i2.clk = clk;
    i2.reset = reset;
    i2.in = invoke_go.out ? arg0;
    i2.in = invoke1_go.out ? call_pulsar_Sinc_q_q.ret;
    fsm.write_en = fsm.out == 3'd4 | fsm.out == 3'd0 & invoke_done.out & tdcc_go.out | fsm.out == 3'd1 & invoke0_done.out & tdcc_go.out | fsm.out == 3'd2 & invoke1_done.out & tdcc_go.out | fsm.out == 3'd3 & invoke2_done.out & tdcc_go.out ? 1'd1;
    fsm.clk = clk;
    fsm.reset = reset;
    fsm.in = fsm.out == 3'd1 & invoke0_done.out & tdcc_go.out ? 3'd2;
    fsm.in = fsm.out == 3'd3 & invoke2_done.out & tdcc_go.out ? 3'd4;
    fsm.in = fsm.out == 3'd4 ? 3'd0;
    fsm.in = fsm.out == 3'd0 & invoke_done.out & tdcc_go.out ? 3'd1;
    fsm.in = fsm.out == 3'd2 & invoke1_done.out & tdcc_go.out ? 3'd3;
    invoke2_go.in = !invoke2_done.out & fsm.out == 3'd3 & tdcc_go.out ? 1'd1;
    call_pulsar_Sinc_q_q.clk = clk;
    call_pulsar_Sinc_q_q.arg0 = invoke0_go.out ? i2.out;
    call_pulsar_Sinc_q_q.reset = reset;
    call_pulsar_Sinc_q_q.go = invoke0_go.out ? 1'd1;
    t1.write_en = invoke2_go.out ? 1'd1;
    t1.clk = clk;
    t1.reset = reset;
    t1.in = invoke2_go.out ? i2.out;
    invoke0_go.in = !invoke0_done.out & fsm.out == 3'd1 & tdcc_go.out ? 1'd1;
    tdcc_go.in = go;
    invoke_done.in = i2.done;
    invoke0_done.in = call_pulsar_Sinc_q_q.done;
    invoke1_go.in = !invoke1_done.out & fsm.out == 3'd2 & tdcc_go.out ? 1'd1;
    invoke2_done.in = t1.done;
    tdcc_done.in = fsm.out == 3'd4 ? 1'd1;
    invoke1_done.in = i2.done;
  }
  control {}
}
